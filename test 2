1.import java.util.Stack;

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        
        for (String token : tokens) {
            if (isOperator(token)) {
                int b = stack.pop();
                int a = stack.pop();
                int result = performOperation(a, b, token);
                stack.push(result);
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        
        return stack.pop();
    }
    
    private boolean isOperator(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/");
    }
    
    private int performOperation(int a, int b, String operator) {
        switch (operator) {
            case "+":
                return a + b;
            case "-":
                return a - b;
            case "*":
                return a * b;
            case "/":
                return a / b; // Integer division truncates toward zero
            default:
                return 0;
        }
    }
}

2.
 
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        
        while (head != null) {
            
            ListNode groupStart = head;
            
            
            ListNode groupEnd = getGroupEnd(head, k);
            
            
            if (groupEnd == null) {
                break;
            }
            
          
            ListNode nextGroup = groupEnd.next;
           
            groupEnd.next = null;
            
         
            ListNode reversedGroup = reverseList(groupStart);
            
            
            prev.next = reversedGroup;
            groupStart.next = nextGroup;
            
            
            prev = groupStart;
            head = nextGroup;
        }
        
        return dummy.next;
    }
    
   
    private ListNode getGroupEnd(ListNode head, int k) {
        while (head != null && --k > 0) {
            head = head.next;
        }
        return head;
    }
    
   
    private ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        
        while (current != null) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        
        return prev;
    }
}


3.
class Solution {
    public ListNode oddEvenList(ListNode head) {
        
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode oddHead = head;
        ListNode evenHead = head.next;
        
        ListNode oddCurrent = oddHead;
        ListNode evenCurrent = evenHead;
        
       
        while (evenCurrent != null && evenCurrent.next != null) {
            oddCurrent.next = evenCurrent.next;
            oddCurrent = oddCurrent.next;
            
            evenCurrent.next = oddCurrent.next;
            evenCurrent = evenCurrent.next;
        }
        
        
        oddCurrent.next = evenHead;
        
        return oddHead;
    }
}


4.import java.util.*;

class Solution {
    public int minOperationsToSort(int[] nums) {
        List<Integer> list = new ArrayList<>();
        for (int num : nums) list.add(num);
        
        int ops = 0;
        while (true) {
            boolean sorted = true;
            for (int i = 0; i < list.size()-1; i++) {
                if (list.get(i) > list.get(i+1)) {
                    sorted = false;
                    break;
                }
            }
            if (sorted) break;
            
            int minSum = Integer.MAX_VALUE, idx = 0;
            for (int i = 0; i < list.size()-1; i++) {
                int sum = list.get(i) + list.get(i+1);
                if (sum < minSum) {
                    minSum = sum;
                    idx = i;
                }
            }
            
            list.set(idx, minSum);
            list.remove(idx+1);
            ops++;
        }
        return ops;
    }
}


5.import java.util.Stack;

class Solution {
    public int[] finalPrices(int[] prices) {
        Stack<Integer> stack = new Stack<>();
        int[] result = Arrays.copyOf(prices, prices.length);
        
        for (int i = 0; i < prices.length; i++) {
            while (!stack.isEmpty() && prices[stack.peek()] >= prices[i]) {
                int prevIndex = stack.pop();
                result[prevIndex] -= prices[i];
            }
            stack.push(i);
        }
        
        return result;
    }
}


6.import java.util.HashMap;
import java.util.Map;

class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        
        Map<Integer, ListNode> prefixSumMap = new HashMap<>();
        int prefixSum = 0;
